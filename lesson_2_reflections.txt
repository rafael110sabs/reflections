What happens when you initialize a repository? Why do you need to do it?
	
	When I initialize a repository the .git folder is created in the directory that I'm in. This folder contains metadata about the repository( commit logs, etc.). If the .git folder is not created then the directory is not a git repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	In the working directory there can be two types of files: Untracked and tracked. In the repository there are only the files we specified to be commited (tracked). The staging area is where we specify the files we want to commit.

How can you use the staging area to make sure you have one commit per logical change?

	By using the command git diff with no arguments. That will compare the files changes in the directory with the ones in the staging area. The initial files in the staging area are equal to those in the Head commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches will help if there is need to create different versions of the files without messing with the original ones.

How do the diagrams help you visualize the branch structure?

	It shows us what was the last common commit between both branches. It is easier to understand with such representation.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	When we merge two branches, the result is a combination of both into one single branch. The commits from the merging branch will not be discarted, but instead, pointed to by the new branch. That way, the diagram will contain the commits from both branches.

What are the pros and cons of Git's automatic merging vs. always merges manually?

	With the automatic merging it automates the task of adding and removing lines from the code. It may result in a conflict if there are different modifications to the same part of the file and git doesn't know which version to keep.
	There would be no conflicts of this type if the merging was always made manually, but it be less efficient for bigger modifications.